{
    "docs": [
        {
            "location": "/", 
            "text": "Siddhi-store-elasticsearch\n\n\nThe \nsiddhi-store-elasticsearch extension\n is an extension for siddhi Elasticsearch event table implementation. This extension can be used to persist events to a\nElasticsearch server instance of version 6.x.x.\n\n\nFind some useful links below:\n\n\n\n\nSource code\n\n\nReleases\n\n\nIssue tracker\n\n\n\n\nLatest API Docs\n\n\nLatest API Docs is \n2.0.0\n.\n\n\nPrerequisites\n\n\n\n\nElasticsearch can be downloaded directly from href=\"https://www.elastic.co/downloads/elasticsearch\" in zip, tar.gz, deb, or rpm packages. \n\n\nThen install the version 6.2.4, usual Ubuntu way with dpkg.\n   \nsudo apt-get update\n   wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/deb/elasticsearch/6.2.4/elasticsearch-6.2.4.deb\n   sudo dpkg -i elasticsearch-6.2.4.deb\n\n   \nHow To Install and Configure Elasticsearch on Ubuntu 16.04\n\n\nAlso you can start the Elasticsearch server using docker image:\n   \ndocker run -p 9600:9200 -p 9700:9300 -e \"discovery.type=single-node\" -e ELASTIC_PASSWORD=MagicWord -d docker.elastic.co/elasticsearch/elasticsearch:6.2.4\n\n\n\n\nHow to use\n\n\nUsing the extension in \nWSO2 Stream Processor\n\n\n\n\n\n\nYou can use this extension in the latest \nWSO2 Stream Processor\n that is a part of \nWSO2 Analytics\n offering, with editor, debugger and simulation support. \n\n\n\n\n\n\nThis extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component \njar\n that can be found in the \nSTREAM_PROCESSOR_HOME\n/lib\n directory.\n\n\n\n\n\n\nUsing the extension as a \njava library\n\n\n\n\nThis extension can be added as a maven dependency along with other Siddhi dependencies to your project.\n\n\n\n\n     \ndependency\n\n        \ngroupId\norg.wso2.extension.siddhi.store.elasticsearch\n/groupId\n\n        \nartifactId\nsiddhi-store-elasticsearch\n/artifactId\n\n        \nversion\nversion\nx.x.x\n/version\n/version\n\n     \n/dependency\n\n\n\n\n\n\nJenkins Build Status\n\n\n\n\n\n\n\n\n\n\nBranch\n\n\nBuild Status\n\n\n\n\n\n\n\n\n\n\nmaster\n\n\n\n\n\n\n\n\n\n\n\n\nFeatures\n\n\n\n\nelasticsearch\n \n(Store)\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.\n\n\n\n\nHow to Contribute\n\n\n\n\n\n\nPlease report issues at \nGitHub Issue Tracker\n.\n\n\n\n\n\n\nSend your contributions as pull requests to \nmaster branch\n. \n\n\n\n\n\n\nContact us\n\n\n\n\n\n\nPost your questions with the \n\"Siddhi\"\n tag in \nStackoverflow\n. \n\n\n\n\n\n\nSiddhi developers can be contacted via the mailing lists:\n\n\nDevelopers List   : \ndev@wso2.org\n\n\nArchitecture List : \narchitecture@wso2.org\n\n\n\n\n\n\nSupport\n\n\n\n\n\n\nWe are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology. \n\n\n\n\n\n\nFor more details and to take advantage of this unique opportunity contact us via \nhttp://wso2.com/support/\n.", 
            "title": "Welcome"
        }, 
        {
            "location": "/#siddhi-store-elasticsearch", 
            "text": "The  siddhi-store-elasticsearch extension  is an extension for siddhi Elasticsearch event table implementation. This extension can be used to persist events to a\nElasticsearch server instance of version 6.x.x.  Find some useful links below:   Source code  Releases  Issue tracker", 
            "title": "Siddhi-store-elasticsearch"
        }, 
        {
            "location": "/#latest-api-docs", 
            "text": "Latest API Docs is  2.0.0 .", 
            "title": "Latest API Docs"
        }, 
        {
            "location": "/#prerequisites", 
            "text": "Elasticsearch can be downloaded directly from href=\"https://www.elastic.co/downloads/elasticsearch\" in zip, tar.gz, deb, or rpm packages.   Then install the version 6.2.4, usual Ubuntu way with dpkg.\n    sudo apt-get update\n   wget https://download.elastic.co/elasticsearch/release/org/elasticsearch/distribution/deb/elasticsearch/6.2.4/elasticsearch-6.2.4.deb\n   sudo dpkg -i elasticsearch-6.2.4.deb \n    How To Install and Configure Elasticsearch on Ubuntu 16.04  Also you can start the Elasticsearch server using docker image:\n    docker run -p 9600:9200 -p 9700:9300 -e \"discovery.type=single-node\" -e ELASTIC_PASSWORD=MagicWord -d docker.elastic.co/elasticsearch/elasticsearch:6.2.4", 
            "title": "Prerequisites"
        }, 
        {
            "location": "/#how-to-use", 
            "text": "Using the extension in  WSO2 Stream Processor    You can use this extension in the latest  WSO2 Stream Processor  that is a part of  WSO2 Analytics  offering, with editor, debugger and simulation support.     This extension is shipped by default with WSO2 Stream Processor, if you wish to use an alternative version of this extension you can replace the component  jar  that can be found in the  STREAM_PROCESSOR_HOME /lib  directory.    Using the extension as a  java library   This extension can be added as a maven dependency along with other Siddhi dependencies to your project.         dependency \n         groupId org.wso2.extension.siddhi.store.elasticsearch /groupId \n         artifactId siddhi-store-elasticsearch /artifactId \n         version version x.x.x /version /version \n      /dependency", 
            "title": "How to use"
        }, 
        {
            "location": "/#jenkins-build-status", 
            "text": "Branch  Build Status      master", 
            "title": "Jenkins Build Status"
        }, 
        {
            "location": "/#features", 
            "text": "elasticsearch   (Store) Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.", 
            "title": "Features"
        }, 
        {
            "location": "/#how-to-contribute", 
            "text": "Please report issues at  GitHub Issue Tracker .    Send your contributions as pull requests to  master branch .", 
            "title": "How to Contribute"
        }, 
        {
            "location": "/#contact-us", 
            "text": "Post your questions with the  \"Siddhi\"  tag in  Stackoverflow .     Siddhi developers can be contacted via the mailing lists:  Developers List   :  dev@wso2.org  Architecture List :  architecture@wso2.org", 
            "title": "Contact us"
        }, 
        {
            "location": "/#support", 
            "text": "We are committed to ensuring support for this extension in production. Our unique approach ensures that all support leverages our open development methodology and is provided by the very same engineers who build the technology.     For more details and to take advantage of this unique opportunity contact us via  http://wso2.com/support/ .", 
            "title": "Support"
        }, 
        {
            "location": "/api/2.0.0/", 
            "text": "API Docs - v2.0.0\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, hostname=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, elasticsearch.member.list=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.type=\nSTRING\n, payload.index.of.index.name=\nINT\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n, bulk.actions=\nINT\n, bulk.size=\nLONG\n, concurrent.requests=\nINT\n, flush.interval=\nLONG\n, backoff.policy.retry.no=\nINT\n, backoff.policy.wait.time=\nLONG\n, ssl.enabled=\nBOOL\n, trust.store.type=\nSTRING\n, trust.store.path=\nSTRING\n, trust.store.pass=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhostname\n\n        \nThe hostname of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nelasticsearch.member.list\n\n        \nThe list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.type\n\n        \nThe the type of the index.\n\n        \n_doc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npayload.index.of.index.name\n\n        \nThe payload which is used to create the index. This can be used if the user needs to create index names dynamically\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards allocated for the index in the Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in the Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbulk.actions\n\n        \nThe number of actions to be added to flush a new bulk request. Use -1 to disable it\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbulk.size\n\n        \nThe size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it\n\n        \n1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconcurrent.requests\n\n        \nThe number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nflush.interval\n\n        \nThe flush interval flushing any BulkRequest pending if the interval passes.\n\n        \n10\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbackoff.policy.retry.no\n\n        \nThe number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)).\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbackoff.policy.wait.time\n\n        \nThe constant back off policy that initially waits until the next retry in seconds.\n\n        \n1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled\n\n        \nSSL is enabled or not.\n\n        \nnull\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrust.store.type\n\n        \nTrust store type.\n\n        \njks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrust.store.path\n\n        \nTrust store path.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrust.store.pass\n\n        \nTrust store password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n, ssl.enabled=\ntrue\n, trust.store.type=\njks\n, trust.store.path=\n/User/wso2/wso2sp/resources/security/client-truststore.jks\n, trust.store.pass=\nwso2carbon\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example uses SSL to connect to Elasticsearch.\n\n\n\nEXAMPLE 3\n\n\n@Store(type=\nelasticsearch\n, elasticsearch.member.list=\nhttps://hostname1:9200,https://hostname2:9200\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.", 
            "title": "2.0.0"
        }, 
        {
            "location": "/api/2.0.0/#api-docs-v200", 
            "text": "", 
            "title": "API Docs - v2.0.0"
        }, 
        {
            "location": "/api/2.0.0/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/2.0.0/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , index.type= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         hostname \n         The hostname of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         elasticsearch.member.list \n         The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 \n         null \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The username for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.type \n         The the type of the index. \n         _doc \n         STRING \n         Yes \n         No \n     \n     \n         payload.index.of.index.name \n         The payload which is used to create the index. This can be used if the user needs to create index names dynamically \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards allocated for the index in the Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in the Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n     \n     \n         bulk.actions \n         The number of actions to be added to flush a new bulk request. Use -1 to disable it \n         1 \n         INT \n         Yes \n         No \n     \n     \n         bulk.size \n         The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it \n         1 \n         LONG \n         Yes \n         No \n     \n     \n         concurrent.requests \n         The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request \n         0 \n         INT \n         Yes \n         No \n     \n     \n         flush.interval \n         The flush interval flushing any BulkRequest pending if the interval passes. \n         10 \n         LONG \n         Yes \n         No \n     \n     \n         backoff.policy.retry.no \n         The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). \n         3 \n         INT \n         Yes \n         No \n     \n     \n         backoff.policy.wait.time \n         The constant back off policy that initially waits until the next retry in seconds. \n         1 \n         LONG \n         Yes \n         No \n     \n     \n         ssl.enabled \n         SSL is enabled or not. \n         null \n         BOOL \n         Yes \n         No \n     \n     \n         trust.store.type \n         Trust store type. \n         jks \n         STRING \n         Yes \n         No \n     \n     \n         trust.store.path \n         Trust store path. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         trust.store.pass \n         Trust store password. \n         wso2carbon \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.  EXAMPLE 2  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example uses SSL to connect to Elasticsearch.  EXAMPLE 3  @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/1.1.4/", 
            "text": "API Docs - v1.1.4\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, hostname=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, elasticsearch.member.list=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.type=\nSTRING\n, payload.index.of.index.name=\nINT\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n, bulk.actions=\nINT\n, bulk.size=\nLONG\n, concurrent.requests=\nINT\n, flush.interval=\nLONG\n, backoff.policy.retry.no=\nINT\n, backoff.policy.wait.time=\nLONG\n, ssl.enabled=\nBOOL\n, trust.store.type=\nSTRING\n, trust.store.path=\nSTRING\n, trust.store.pass=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhostname\n\n        \nThe hostname of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nelasticsearch.member.list\n\n        \nThe list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.type\n\n        \nThe the type of the index.\n\n        \n_doc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npayload.index.of.index.name\n\n        \nThe payload which is used to create the index. This can be used if the user needs to create index names dynamically\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards allocated for the index in the Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in the Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbulk.actions\n\n        \nThe number of actions to be added to flush a new bulk request. Use -1 to disable it\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbulk.size\n\n        \nThe size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it\n\n        \n1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconcurrent.requests\n\n        \nThe number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nflush.interval\n\n        \nThe flush interval flushing any BulkRequest pending if the interval passes.\n\n        \n10\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbackoff.policy.retry.no\n\n        \nThe number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)).\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbackoff.policy.wait.time\n\n        \nThe constant back off policy that initially waits until the next retry in seconds.\n\n        \n1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled\n\n        \nSSL is enabled or not.\n\n        \nnull\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrust.store.type\n\n        \nTrust store type.\n\n        \njks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrust.store.path\n\n        \nTrust store path.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrust.store.pass\n\n        \nTrust store password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n, ssl.enabled=\ntrue\n, trust.store.type=\njks\n, trust.store.path=\n/User/wso2/wso2sp/resources/security/client-truststore.jks\n, trust.store.pass=\nwso2carbon\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example uses SSL to connect to Elasticsearch.\n\n\n\nEXAMPLE 3\n\n\n@Store(type=\nelasticsearch\n, elasticsearch.member.list=\nhttps://hostname1:9200,https://hostname2:9200\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.", 
            "title": "1.1.4"
        }, 
        {
            "location": "/api/1.1.4/#api-docs-v114", 
            "text": "", 
            "title": "API Docs - v1.1.4"
        }, 
        {
            "location": "/api/1.1.4/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/1.1.4/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , index.type= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         hostname \n         The hostname of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         elasticsearch.member.list \n         The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 \n         null \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The username for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.type \n         The the type of the index. \n         _doc \n         STRING \n         Yes \n         No \n     \n     \n         payload.index.of.index.name \n         The payload which is used to create the index. This can be used if the user needs to create index names dynamically \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards allocated for the index in the Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in the Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n     \n     \n         bulk.actions \n         The number of actions to be added to flush a new bulk request. Use -1 to disable it \n         1 \n         INT \n         Yes \n         No \n     \n     \n         bulk.size \n         The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it \n         1 \n         LONG \n         Yes \n         No \n     \n     \n         concurrent.requests \n         The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request \n         0 \n         INT \n         Yes \n         No \n     \n     \n         flush.interval \n         The flush interval flushing any BulkRequest pending if the interval passes. \n         10 \n         LONG \n         Yes \n         No \n     \n     \n         backoff.policy.retry.no \n         The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). \n         3 \n         INT \n         Yes \n         No \n     \n     \n         backoff.policy.wait.time \n         The constant back off policy that initially waits until the next retry in seconds. \n         1 \n         LONG \n         Yes \n         No \n     \n     \n         ssl.enabled \n         SSL is enabled or not. \n         null \n         BOOL \n         Yes \n         No \n     \n     \n         trust.store.type \n         Trust store type. \n         jks \n         STRING \n         Yes \n         No \n     \n     \n         trust.store.path \n         Trust store path. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         trust.store.pass \n         Trust store password. \n         wso2carbon \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.  EXAMPLE 2  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example uses SSL to connect to Elasticsearch.  EXAMPLE 3  @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/1.1.3/", 
            "text": "API Docs - v1.1.3\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, hostname=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, elasticsearch.member.list=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, payload.index.of.index.name=\nINT\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n, bulk.actions=\nINT\n, bulk.size=\nLONG\n, concurrent.requests=\nINT\n, flush.interval=\nLONG\n, backoff.policy.retry.no=\nINT\n, backoff.policy.wait.time=\nLONG\n, ssl.enabled=\nBOOL\n, trust.store.type=\nSTRING\n, trust.store.path=\nSTRING\n, trust.store.pass=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhostname\n\n        \nThe hostname of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nelasticsearch.member.list\n\n        \nThe list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npayload.index.of.index.name\n\n        \nThe payload which is used to create the index. This can be used if the user needs to create index names dynamically\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards allocated for the index in the Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in the Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbulk.actions\n\n        \nThe number of actions to be added to flush a new bulk request. Use -1 to disable it\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbulk.size\n\n        \nThe size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it\n\n        \n1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconcurrent.requests\n\n        \nThe number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nflush.interval\n\n        \nThe flush interval flushing any BulkRequest pending if the interval passes.\n\n        \n10\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbackoff.policy.retry.no\n\n        \nThe number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)).\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbackoff.policy.wait.time\n\n        \nThe constant back off policy that initially waits until the next retry in seconds.\n\n        \n1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled\n\n        \nSSL is enabled or not.\n\n        \nnull\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrust.store.type\n\n        \nTrust store type.\n\n        \njks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrust.store.path\n\n        \nTrust store path.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrust.store.pass\n\n        \nTrust store password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n, ssl.enabled=\ntrue\n, trust.store.type=\njks\n, trust.store.path=\n/User/wso2/wso2sp/resources/security/client-truststore.jks\n, trust.store.pass=\nwso2carbon\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example uses SSL to connect to Elasticsearch.\n\n\n\nEXAMPLE 3\n\n\n@Store(type=\nelasticsearch\n, elasticsearch.member.list=\nhttps://hostname1:9200,https://hostname2:9200\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.", 
            "title": "1.1.3"
        }, 
        {
            "location": "/api/1.1.3/#api-docs-v113", 
            "text": "", 
            "title": "API Docs - v1.1.3"
        }, 
        {
            "location": "/api/1.1.3/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/1.1.3/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         hostname \n         The hostname of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         elasticsearch.member.list \n         The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 \n         null \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The username for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         payload.index.of.index.name \n         The payload which is used to create the index. This can be used if the user needs to create index names dynamically \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards allocated for the index in the Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in the Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n     \n     \n         bulk.actions \n         The number of actions to be added to flush a new bulk request. Use -1 to disable it \n         1 \n         INT \n         Yes \n         No \n     \n     \n         bulk.size \n         The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it \n         1 \n         LONG \n         Yes \n         No \n     \n     \n         concurrent.requests \n         The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request \n         0 \n         INT \n         Yes \n         No \n     \n     \n         flush.interval \n         The flush interval flushing any BulkRequest pending if the interval passes. \n         10 \n         LONG \n         Yes \n         No \n     \n     \n         backoff.policy.retry.no \n         The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). \n         3 \n         INT \n         Yes \n         No \n     \n     \n         backoff.policy.wait.time \n         The constant back off policy that initially waits until the next retry in seconds. \n         1 \n         LONG \n         Yes \n         No \n     \n     \n         ssl.enabled \n         SSL is enabled or not. \n         null \n         BOOL \n         Yes \n         No \n     \n     \n         trust.store.type \n         Trust store type. \n         jks \n         STRING \n         Yes \n         No \n     \n     \n         trust.store.path \n         Trust store path. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         trust.store.pass \n         Trust store password. \n         wso2carbon \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.  EXAMPLE 2  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example uses SSL to connect to Elasticsearch.  EXAMPLE 3  @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/1.1.2/", 
            "text": "API Docs - v1.1.2\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, hostname=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n, bulk.actions=\nINT\n, bulk.size=\nLONG\n, concurrent.requests=\nINT\n, flush.interval=\nLONG\n, backoff.policy.retry.no=\nINT\n, backoff.policy.wait.time=\nLONG\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhostname\n\n        \nThe hostname of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards allocated for the index in the Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in the Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbulk.actions\n\n        \nThe number of actions to be added to flush a new bulk request. Use -1 to disable it\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbulk.size\n\n        \nThe size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it\n\n        \n1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconcurrent.requests\n\n        \nThe number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nflush.interval\n\n        \nThe flush interval flushing any BulkRequest pending if the interval passes.\n\n        \n10\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbackoff.policy.retry.no\n\n        \nThe number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)).\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbackoff.policy.wait.time\n\n        \nThe constant back off policy that initially waits until the next retry in seconds.\n\n        \n1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.", 
            "title": "1.1.2"
        }, 
        {
            "location": "/api/1.1.2/#api-docs-v112", 
            "text": "", 
            "title": "API Docs - v1.1.2"
        }, 
        {
            "location": "/api/1.1.2/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/1.1.2/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         hostname \n         The hostname of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The username for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards allocated for the index in the Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in the Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n     \n     \n         bulk.actions \n         The number of actions to be added to flush a new bulk request. Use -1 to disable it \n         1 \n         INT \n         Yes \n         No \n     \n     \n         bulk.size \n         The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it \n         1 \n         LONG \n         Yes \n         No \n     \n     \n         concurrent.requests \n         The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request \n         0 \n         INT \n         Yes \n         No \n     \n     \n         flush.interval \n         The flush interval flushing any BulkRequest pending if the interval passes. \n         10 \n         LONG \n         Yes \n         No \n     \n     \n         backoff.policy.retry.no \n         The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). \n         3 \n         INT \n         Yes \n         No \n     \n     \n         backoff.policy.wait.time \n         The constant back off policy that initially waits until the next retry in seconds. \n         1 \n         LONG \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/1.1.1/", 
            "text": "API Docs - v1.1.1\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, hostname=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhostname\n\n        \nThe hostname of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards allocated for the index in the Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in the Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, hostname=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n , index.name=\nMyStockTable\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.", 
            "title": "1.1.1"
        }, 
        {
            "location": "/api/1.1.1/#api-docs-v111", 
            "text": "", 
            "title": "API Docs - v1.1.1"
        }, 
        {
            "location": "/api/1.1.1/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/1.1.1/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         hostname \n         The hostname of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The username for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards allocated for the index in the Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in the Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , hostname= localhost , username= elastic , password= changeme  , index.name= MyStockTable ,field.length= symbol:100 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/1.1.0/", 
            "text": "API Docs - v1.1.0\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, host=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nThe host of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards allocated for the index in the Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in the Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n , index.name=\nMyStockTable\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.", 
            "title": "1.1.0"
        }, 
        {
            "location": "/api/1.1.0/#api-docs-v110", 
            "text": "", 
            "title": "API Docs - v1.1.0"
        }, 
        {
            "location": "/api/1.1.0/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/1.1.0/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         The host of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The username for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards allocated for the index in the Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in the Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme  , index.name= MyStockTable ,field.length= symbol:100 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/1.0.5/", 
            "text": "API Docs - v1.0.5\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, host=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nThe host of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards allocated for the index in the Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in the Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n , index.name=\nMyStockTable\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.", 
            "title": "1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#api-docs-v105", 
            "text": "", 
            "title": "API Docs - v1.0.5"
        }, 
        {
            "location": "/api/1.0.5/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/1.0.5/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         The host of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The username for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards allocated for the index in the Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in the Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme  , index.name= MyStockTable ,field.length= symbol:100 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/1.0.4/", 
            "text": "API Docs - v1.0.4\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, host=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nThe host of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards allocated for the index in the Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in the Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n , index.name=\nMyStockTable\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.", 
            "title": "1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#api-docs-v104", 
            "text": "", 
            "title": "API Docs - v1.0.4"
        }, 
        {
            "location": "/api/1.0.4/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/1.0.4/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         The host of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The username for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards allocated for the index in the Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in the Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme  , index.name= MyStockTable ,field.length= symbol:100 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/1.0.3/", 
            "text": "API Docs - v1.0.3\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, host=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nThe host of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe user name for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards for the index in Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n , index.name=\nMyStockTable\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an index named \nMyStockTable\n on the Elasticsearch server if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a Elasticsearch index document id is generated for it.", 
            "title": "1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#api-docs-v103", 
            "text": "", 
            "title": "API Docs - v1.0.3"
        }, 
        {
            "location": "/api/1.0.3/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/1.0.3/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         The host of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The user name for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards for the index in Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme  , index.name= MyStockTable ,field.length= symbol:100 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  The above example creates an index named  MyStockTable  on the Elasticsearch server if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a Elasticsearch index document id is generated for it.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/1.0.2/", 
            "text": "API Docs - v1.0.2\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, host=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nThe host of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe user name for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards for the index in Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n , index.name=\nMyStockTable\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an index named \nMyStockTable\n on the Elasticsearch server if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a Elasticsearch index document id is generated for it.", 
            "title": "1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#api-docs-v102", 
            "text": "", 
            "title": "API Docs - v1.0.2"
        }, 
        {
            "location": "/api/1.0.2/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/1.0.2/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         The host of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The user name for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards for the index in Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme  , index.name= MyStockTable ,field.length= symbol:100 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  The above example creates an index named  MyStockTable  on the Elasticsearch server if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a Elasticsearch index document id is generated for it.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/1.0.1/", 
            "text": "API Docs - v1.0.1\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, host=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nThe host of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe user name for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards for the index in Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n , index.name=\nMyStockTable\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an index named \nMyStockTable\n on the Elasticsearch server if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a Elasticsearch index document id is generated for it.", 
            "title": "1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#api-docs-v101", 
            "text": "", 
            "title": "API Docs - v1.0.1"
        }, 
        {
            "location": "/api/1.0.1/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/1.0.1/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         The host of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The user name for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards for the index in Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme  , index.name= MyStockTable ,field.length= symbol:100 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  The above example creates an index named  MyStockTable  on the Elasticsearch server if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a Elasticsearch index document id is generated for it.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/1.0.0/", 
            "text": "API Docs - v1.0.0\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, host=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhost\n\n        \nThe host of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe user name for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards for the index in Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n , index.name=\nMyStockTable\n,field.length=\nsymbol:100\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThe above example creates an index named \nMyStockTable\n on the Elasticsearch server if it does not already exist (with 3 attributes named \nsymbol\n, \nprice\n, and \nvolume\n of the types types \nstring\n, \nfloat\n and \nlong\n respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The \nsymbol\n attribute is considered a unique field, and a Elasticsearch index document id is generated for it.", 
            "title": "1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#api-docs-v100", 
            "text": "", 
            "title": "API Docs - v1.0.0"
        }, 
        {
            "location": "/api/1.0.0/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/1.0.0/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted to elasticsearch store. Elasticsearch indexing documents are converted to Events when the documents are read from Elasticsearch indexes. Internally store connected with Elasticsearch server with The Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , host= STRING , port= INT , scheme= STRING , username= STRING , password= STRING , index.name= STRING , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         host \n         The host of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The user name for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards for the index in Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme  , index.name= MyStockTable ,field.length= symbol:100 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  The above example creates an index named  MyStockTable  on the Elasticsearch server if it does not already exist (with 3 attributes named  symbol ,  price , and  volume  of the types types  string ,  float  and  long  respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The  symbol  attribute is considered a unique field, and a Elasticsearch index document id is generated for it.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/api/latest/", 
            "text": "API Docs - v2.0.0\n\n\nStore\n\n\nelasticsearch \n(Store)\n\n\nElasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.\n\n\n\nSyntax\n\n\n@Store(type=\nelasticsearch\n, hostname=\nSTRING\n, port=\nINT\n, scheme=\nSTRING\n, elasticsearch.member.list=\nSTRING\n, username=\nSTRING\n, password=\nSTRING\n, index.name=\nSTRING\n, index.type=\nSTRING\n, payload.index.of.index.name=\nINT\n, index.alias=\nSTRING\n, index.number.of.shards=\nINT\n, index.number.of.replicas=\nINT\n, bulk.actions=\nINT\n, bulk.size=\nLONG\n, concurrent.requests=\nINT\n, flush.interval=\nLONG\n, backoff.policy.retry.no=\nINT\n, backoff.policy.wait.time=\nLONG\n, ssl.enabled=\nBOOL\n, trust.store.type=\nSTRING\n, trust.store.path=\nSTRING\n, trust.store.pass=\nSTRING\n)\n@PrimaryKey(\nPRIMARY_KEY\n)\n@Index(\nINDEX\n)\n\n\n\n\n\nQUERY PARAMETERS\n\n\n\n    \n\n        \nName\n\n        \nDescription\n\n        \nDefault Value\n\n        \nPossible Data Types\n\n        \nOptional\n\n        \nDynamic\n\n    \n\n    \n\n        \nhostname\n\n        \nThe hostname of the Elasticsearch server.\n\n        \nlocalhost\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nport\n\n        \nThe port of the Elasticsearch server.\n\n        \n9200\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nscheme\n\n        \nThe scheme type of the Elasticsearch server connection.\n\n        \nhttp\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nelasticsearch.member.list\n\n        \nThe list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nusername\n\n        \nThe username for the Elasticsearch server connection.\n\n        \nelastic\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npassword\n\n        \nThe password for the Elasticsearch server connection.\n\n        \nchangeme\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.name\n\n        \nThe name of the Elasticsearch index.\n\n        \nThe table name defined in the Siddhi App query.\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.type\n\n        \nThe the type of the index.\n\n        \n_doc\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \npayload.index.of.index.name\n\n        \nThe payload which is used to create the index. This can be used if the user needs to create index names dynamically\n\n        \n-1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.alias\n\n        \nThe alias of the Elasticsearch index.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.shards\n\n        \nThe number of shards allocated for the index in the Elasticsearch server.\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nindex.number.of.replicas\n\n        \nThe number of replicas for the index in the Elasticsearch server.\n\n        \n2\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbulk.actions\n\n        \nThe number of actions to be added to flush a new bulk request. Use -1 to disable it\n\n        \n1\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbulk.size\n\n        \nThe size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it\n\n        \n1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nconcurrent.requests\n\n        \nThe number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request\n\n        \n0\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nflush.interval\n\n        \nThe flush interval flushing any BulkRequest pending if the interval passes.\n\n        \n10\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbackoff.policy.retry.no\n\n        \nThe number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)).\n\n        \n3\n\n        \nINT\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nbackoff.policy.wait.time\n\n        \nThe constant back off policy that initially waits until the next retry in seconds.\n\n        \n1\n\n        \nLONG\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \nssl.enabled\n\n        \nSSL is enabled or not.\n\n        \nnull\n\n        \nBOOL\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrust.store.type\n\n        \nTrust store type.\n\n        \njks\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrust.store.path\n\n        \nTrust store path.\n\n        \nnull\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n    \n\n        \ntrust.store.pass\n\n        \nTrust store password.\n\n        \nwso2carbon\n\n        \nSTRING\n\n        \nYes\n\n        \nNo\n\n    \n\n\n\n\nExamples\n\n\nEXAMPLE 1\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.\n\n\n\nEXAMPLE 2\n\n\n@Store(type=\nelasticsearch\n, host=\nlocalhost\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n, ssl.enabled=\ntrue\n, trust.store.type=\njks\n, trust.store.path=\n/User/wso2/wso2sp/resources/security/client-truststore.jks\n, trust.store.pass=\nwso2carbon\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example uses SSL to connect to Elasticsearch.\n\n\n\nEXAMPLE 3\n\n\n@Store(type=\nelasticsearch\n, elasticsearch.member.list=\nhttps://hostname1:9200,https://hostname2:9200\n, username=\nelastic\n, password=\nchangeme\n, index.name=\nMyStockTable\n, field.length=\nsymbol:100\n, bulk.actions=\n5000\n, bulk.size=\n1\n, concurrent.requests=\n2\n, flush.interval=\n1\n, backoff.policy.retry.no=\n3\n, backoff.policy.wait.time=\n1\n)\n@PrimaryKey(\nsymbol\n)define table StockTable (symbol string, price float, volume long);\n\n\n\n\n\nThis example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.", 
            "title": "latest"
        }, 
        {
            "location": "/api/latest/#api-docs-v200", 
            "text": "", 
            "title": "API Docs - v2.0.0"
        }, 
        {
            "location": "/api/latest/#store", 
            "text": "", 
            "title": "Store"
        }, 
        {
            "location": "/api/latest/#elasticsearch-store", 
            "text": "Elasticsearch store implementation uses Elasticsearch indexing document for underlying data storage. The events are converted to Elasticsearch index documents when the events are inserted into the elasticsearch store. Elasticsearch indexing documents are converted to events when the documents are read from Elasticsearch indexes. The internal store is connected to the Elastisearch server via the Elasticsearch Java High Level REST Client library.  Syntax  @Store(type= elasticsearch , hostname= STRING , port= INT , scheme= STRING , elasticsearch.member.list= STRING , username= STRING , password= STRING , index.name= STRING , index.type= STRING , payload.index.of.index.name= INT , index.alias= STRING , index.number.of.shards= INT , index.number.of.replicas= INT , bulk.actions= INT , bulk.size= LONG , concurrent.requests= INT , flush.interval= LONG , backoff.policy.retry.no= INT , backoff.policy.wait.time= LONG , ssl.enabled= BOOL , trust.store.type= STRING , trust.store.path= STRING , trust.store.pass= STRING )\n@PrimaryKey( PRIMARY_KEY )\n@Index( INDEX )  QUERY PARAMETERS  \n     \n         Name \n         Description \n         Default Value \n         Possible Data Types \n         Optional \n         Dynamic \n     \n     \n         hostname \n         The hostname of the Elasticsearch server. \n         localhost \n         STRING \n         Yes \n         No \n     \n     \n         port \n         The port of the Elasticsearch server. \n         9200 \n         INT \n         Yes \n         No \n     \n     \n         scheme \n         The scheme type of the Elasticsearch server connection. \n         http \n         STRING \n         Yes \n         No \n     \n     \n         elasticsearch.member.list \n         The list of elasticsearch host names. in comma separated mannerhttps://hostname1:9200,https://hostname2:9200 \n         null \n         STRING \n         Yes \n         No \n     \n     \n         username \n         The username for the Elasticsearch server connection. \n         elastic \n         STRING \n         Yes \n         No \n     \n     \n         password \n         The password for the Elasticsearch server connection. \n         changeme \n         STRING \n         Yes \n         No \n     \n     \n         index.name \n         The name of the Elasticsearch index. \n         The table name defined in the Siddhi App query. \n         STRING \n         Yes \n         No \n     \n     \n         index.type \n         The the type of the index. \n         _doc \n         STRING \n         Yes \n         No \n     \n     \n         payload.index.of.index.name \n         The payload which is used to create the index. This can be used if the user needs to create index names dynamically \n         -1 \n         INT \n         Yes \n         No \n     \n     \n         index.alias \n         The alias of the Elasticsearch index. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         index.number.of.shards \n         The number of shards allocated for the index in the Elasticsearch server. \n         3 \n         INT \n         Yes \n         No \n     \n     \n         index.number.of.replicas \n         The number of replicas for the index in the Elasticsearch server. \n         2 \n         INT \n         Yes \n         No \n     \n     \n         bulk.actions \n         The number of actions to be added to flush a new bulk request. Use -1 to disable it \n         1 \n         INT \n         Yes \n         No \n     \n     \n         bulk.size \n         The size of size of actions currently added to the bulk request to flush a new bulk request in MB. Use -1 to disable it \n         1 \n         LONG \n         Yes \n         No \n     \n     \n         concurrent.requests \n         The number of concurrent requests allowed to be executed. Use 0 to only allow the execution of a single request \n         0 \n         INT \n         Yes \n         No \n     \n     \n         flush.interval \n         The flush interval flushing any BulkRequest pending if the interval passes. \n         10 \n         LONG \n         Yes \n         No \n     \n     \n         backoff.policy.retry.no \n         The number of retries until backoff (The backoff policy defines how the bulk processor should handle retries of bulk requests internally in case they have failed due to resource constraints (i.e. a thread pool was full)). \n         3 \n         INT \n         Yes \n         No \n     \n     \n         backoff.policy.wait.time \n         The constant back off policy that initially waits until the next retry in seconds. \n         1 \n         LONG \n         Yes \n         No \n     \n     \n         ssl.enabled \n         SSL is enabled or not. \n         null \n         BOOL \n         Yes \n         No \n     \n     \n         trust.store.type \n         Trust store type. \n         jks \n         STRING \n         Yes \n         No \n     \n     \n         trust.store.path \n         Trust store path. \n         null \n         STRING \n         Yes \n         No \n     \n     \n         trust.store.pass \n         Trust store password. \n         wso2carbon \n         STRING \n         Yes \n         No \n       Examples  EXAMPLE 1  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example creates an index named 'MyStockTable' in the Elasticsearch server if it does not already exist (with three attributes named 'symbol', 'price', and 'volume' of the types 'string', 'float' and 'long' respectively). The connection is made as specified by the parameters configured for the '@Store' annotation. The 'symbol' attribute is considered a unique field and an Elasticsearch index document ID is generated for it.  EXAMPLE 2  @Store(type= elasticsearch , host= localhost , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 , ssl.enabled= true , trust.store.type= jks , trust.store.path= /User/wso2/wso2sp/resources/security/client-truststore.jks , trust.store.pass= wso2carbon )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example uses SSL to connect to Elasticsearch.  EXAMPLE 3  @Store(type= elasticsearch , elasticsearch.member.list= https://hostname1:9200,https://hostname2:9200 , username= elastic , password= changeme , index.name= MyStockTable , field.length= symbol:100 , bulk.actions= 5000 , bulk.size= 1 , concurrent.requests= 2 , flush.interval= 1 , backoff.policy.retry.no= 3 , backoff.policy.wait.time= 1 )\n@PrimaryKey( symbol )define table StockTable (symbol string, price float, volume long);  This example defined several elasticsearch members to publish data using elasticsearch.member.list parameter.", 
            "title": "elasticsearch (Store)"
        }, 
        {
            "location": "/about/license/", 
            "text": "Copyright (c) 2017 WSO2 Inc. (\nhttp://www.wso2.org\n) All Rights Reserved.\n\n\nWSO2 Inc. licenses this file to you under the Apache License,\nVersion 2.0 (the \"License\"); you may not use this file except\nin compliance with the License.\nYou may obtain a copy of the License at\n\n\nhttp://www.apache.org/licenses/LICENSE-2.0\n\n\nUnless required by applicable law or agreed to in writing,\nsoftware distributed under the License is distributed on an\n\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\nKIND, either express or implied.  See the License for the\nspecific language governing permissions and limitations\nunder the License.\n\n\n-------------------------------------------------------------------------\n                              Apache License\n                        Version 2.0, January 2004\n                     http://www.apache.org/licenses/\n\n\nTERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION\n\n1. Definitions.\n\n   \nLicense\n shall mean the terms and conditions for use, reproduction,\n   and distribution as defined by Sections 1 through 9 of this document.\n\n   \nLicensor\n shall mean the copyright owner or entity authorized by\n   the copyright owner that is granting the License.\n\n   \nLegal Entity\n shall mean the union of the acting entity and all\n   other entities that control, are controlled by, or are under common\n   control with that entity. For the purposes of this definition,\n   \ncontrol\n means (i) the power, direct or indirect, to cause the\n   direction or management of such entity, whether by contract or\n   otherwise, or (ii) ownership of fifty percent (50%) or more of the\n   outstanding shares, or (iii) beneficial ownership of such entity.\n\n   \nYou\n (or \nYour\n) shall mean an individual or Legal Entity\n   exercising permissions granted by this License.\n\n   \nSource\n form shall mean the preferred form for making modifications,\n   including but not limited to software source code, documentation\n   source, and configuration files.\n\n   \nObject\n form shall mean any form resulting from mechanical\n   transformation or translation of a Source form, including but\n   not limited to compiled object code, generated documentation,\n   and conversions to other media types.\n\n   \nWork\n shall mean the work of authorship, whether in Source or\n   Object form, made available under the License, as indicated by a\n   copyright notice that is included in or attached to the work\n   (an example is provided in the Appendix below).\n\n   \nDerivative Works\n shall mean any work, whether in Source or Object\n   form, that is based on (or derived from) the Work and for which the\n   editorial revisions, annotations, elaborations, or other modifications\n   represent, as a whole, an original work of authorship. For the purposes\n   of this License, Derivative Works shall not include works that remain\n   separable from, or merely link (or bind by name) to the interfaces of,\n   the Work and Derivative Works thereof.\n\n   \nContribution\n shall mean any work of authorship, including\n   the original version of the Work and any modifications or additions\n   to that Work or Derivative Works thereof, that is intentionally\n   submitted to Licensor for inclusion in the Work by the copyright owner\n   or by an individual or Legal Entity authorized to submit on behalf of\n   the copyright owner. For the purposes of this definition, \nsubmitted\n\n   means any form of electronic, verbal, or written communication sent\n   to the Licensor or its representatives, including but not limited to\n   communication on electronic mailing lists, source code control systems,\n   and issue tracking systems that are managed by, or on behalf of, the\n   Licensor for the purpose of discussing and improving the Work, but\n   excluding communication that is conspicuously marked or otherwise\n   designated in writing by the copyright owner as \nNot a Contribution.\n\n\n   \nContributor\n shall mean Licensor and any individual or Legal Entity\n   on behalf of whom a Contribution has been received by Licensor and\n   subsequently incorporated within the Work.\n\n2. Grant of Copyright License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   copyright license to reproduce, prepare Derivative Works of,\n   publicly display, publicly perform, sublicense, and distribute the\n   Work and such Derivative Works in Source or Object form.\n\n3. Grant of Patent License. Subject to the terms and conditions of\n   this License, each Contributor hereby grants to You a perpetual,\n   worldwide, non-exclusive, no-charge, royalty-free, irrevocable\n   (except as stated in this section) patent license to make, have made,\n   use, offer to sell, sell, import, and otherwise transfer the Work,\n   where such license applies only to those patent claims licensable\n   by such Contributor that are necessarily infringed by their\n   Contribution(s) alone or by combination of their Contribution(s)\n   with the Work to which such Contribution(s) was submitted. If You\n   institute patent litigation against any entity (including a\n   cross-claim or counterclaim in a lawsuit) alleging that the Work\n   or a Contribution incorporated within the Work constitutes direct\n   or contributory patent infringement, then any patent licenses\n   granted to You under this License for that Work shall terminate\n   as of the date such litigation is filed.\n\n4. Redistribution. You may reproduce and distribute copies of the\n   Work or Derivative Works thereof in any medium, with or without\n   modifications, and in Source or Object form, provided that You\n   meet the following conditions:\n\n   (a) You must give any other recipients of the Work or\n       Derivative Works a copy of this License; and\n\n   (b) You must cause any modified files to carry prominent notices\n       stating that You changed the files; and\n\n   (c) You must retain, in the Source form of any Derivative Works\n       that You distribute, all copyright, patent, trademark, and\n       attribution notices from the Source form of the Work,\n       excluding those notices that do not pertain to any part of\n       the Derivative Works; and\n\n   (d) If the Work includes a \nNOTICE\n text file as part of its\n       distribution, then any Derivative Works that You distribute must\n       include a readable copy of the attribution notices contained\n       within such NOTICE file, excluding those notices that do not\n       pertain to any part of the Derivative Works, in at least one\n       of the following places: within a NOTICE text file distributed\n       as part of the Derivative Works; within the Source form or\n       documentation, if provided along with the Derivative Works; or,\n       within a display generated by the Derivative Works, if and\n       wherever such third-party notices normally appear. The contents\n       of the NOTICE file are for informational purposes only and\n       do not modify the License. You may add Your own attribution\n       notices within Derivative Works that You distribute, alongside\n       or as an addendum to the NOTICE text from the Work, provided\n       that such additional attribution notices cannot be construed\n       as modifying the License.\n\n   You may add Your own copyright statement to Your modifications and\n   may provide additional or different license terms and conditions\n   for use, reproduction, or distribution of Your modifications, or\n   for any such Derivative Works as a whole, provided Your use,\n   reproduction, and distribution of the Work otherwise complies with\n   the conditions stated in this License.\n\n5. Submission of Contributions. Unless You explicitly state otherwise,\n   any Contribution intentionally submitted for inclusion in the Work\n   by You to the Licensor shall be under the terms and conditions of\n   this License, without any additional terms or conditions.\n   Notwithstanding the above, nothing herein shall supersede or modify\n   the terms of any separate license agreement you may have executed\n   with Licensor regarding such Contributions.\n\n6. Trademarks. This License does not grant permission to use the trade\n   names, trademarks, service marks, or product names of the Licensor,\n   except as required for reasonable and customary use in describing the\n   origin of the Work and reproducing the content of the NOTICE file.\n\n7. Disclaimer of Warranty. Unless required by applicable law or\n   agreed to in writing, Licensor provides the Work (and each\n   Contributor provides its Contributions) on an \nAS IS\n BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or\n   implied, including, without limitation, any warranties or conditions\n   of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A\n   PARTICULAR PURPOSE. You are solely responsible for determining the\n   appropriateness of using or redistributing the Work and assume any\n   risks associated with Your exercise of permissions under this License.\n\n8. Limitation of Liability. In no event and under no legal theory,\n   whether in tort (including negligence), contract, or otherwise,\n   unless required by applicable law (such as deliberate and grossly\n   negligent acts) or agreed to in writing, shall any Contributor be\n   liable to You for damages, including any direct, indirect, special,\n   incidental, or consequential damages of any character arising as a\n   result of this License or out of the use or inability to use the\n   Work (including but not limited to damages for loss of goodwill,\n   work stoppage, computer failure or malfunction, or any and all\n   other commercial damages or losses), even if such Contributor\n   has been advised of the possibility of such damages.\n\n9. Accepting Warranty or Additional Liability. While redistributing\n   the Work or Derivative Works thereof, You may choose to offer,\n   and charge a fee for, acceptance of support, warranty, indemnity,\n   or other liability obligations and/or rights consistent with this\n   License. However, in accepting such obligations, You may act only\n   on Your own behalf and on Your sole responsibility, not on behalf\n   of any other Contributor, and only if You agree to indemnify,\n   defend, and hold each Contributor harmless for any liability\n   incurred by, or claims asserted against, such Contributor by reason\n   of your accepting any such warranty or additional liability.\n\nEND OF TERMS AND CONDITIONS", 
            "title": "License"
        }
    ]
}